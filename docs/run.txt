############################
Collect and run healthchecks
############################

Given :doc:`you have healthchecks </write>`, there are two main ways to
collect and run healthchecks:

1. run a shell command:

   * using `hospital.cli`_
   * using `nose`_

2. perform GET requests to a web service: using `hospital.wsgi`_.

If you want to setup another runner, notice that you can use the
:func:`~hospital.core.is_healthcheck` function to verify whether an object is
a healthcheck or not.


************
hospital.cli
************

You can use :mod:`hospital.cli` to collect and run healthchecks:

.. code:: console

   $ python -m hospital.cli hospital.healthchecks.predictable
   .
   ----------------------------------------------------------------------
   Ran 1 test in 0.001s

   OK

See ``python -m hospital.cli --help`` for detailed usage and options.


****
Nose
****

Here are guidelines to collect and run healthchecks with `nose`_.
In the examples below, we run health checks of `hospital` project.

.. code:: console

   $ nosetests --all-modules --attr='is_healthcheck' hospital.healthchecks.predictable
   .
   ----------------------------------------------------------------------
   Ran 1 test in 0.001s
   
   OK

Reciprocally, you may want to skip healthchecks when you run tests.
With `nose`, it could be:

.. code:: console

   $ nosetests --all-modules --attr='!is_healthcheck' hospital.healthchecks
   
   ----------------------------------------------------------------------
   Ran 0 tests in 0.000s

   OK

.. tip::

   `--all-modules option`_ makes Nose collect tests in all modules. Without the
   option, it would have collected modules or packages named "tests", and not
   "healthchecks".


*************
hospital.wsgi
*************

You can use :mod:`hospital.wsgi` to expose healthchecks over HTTP:

Using the standalone HTTPD server
+++++++++++++++++++++++++++++++++

.. code:: console

   $ hospital_serve hospital.healthchecks.predictable
   Serving on 0.0.0.0 port 1515...

See ``hospital_serve --help`` for detailed usage and options.

Then each time you perform a GET on the server's root, healthchecks are
collected and run.

The status code of the response is 200 in case all healthchecks passed, else it
is 500.

.. code:: console

   $ curl -X GET -I http://localhost:112112/
   HTTP/1.0 200 OK
   Date: Fri, 28 Feb 2014 13:19:08 GMT
   Server: WSGIServer/0.1 Python/2.7.5+
   Content-Type: application/json; charset=utf-8
   Content-Length: 520

The output is JSON:

.. code:: json

   {
       "status": "pass",
       "details": [
           {
               "test": "Health checks are collected.",
               "status": "pass"
           }
       ],
       "summary": {
           "skip": 0,
           "pass": 1,
           "expected_failure": 0,
           "error": 0,
           "fail": 0,
           "total": 1,
           "unexpected_success": 0
       }
   }

Using the WSGI endpoint
+++++++++++++++++++++++

With Gunicorn
-------------

.. code:: console

    export HEALTHCHECKS='hospital.healthchecks.predictable'
    gunicorn -w 4 hospital.wsgi:application

http://gunicorn.org/


With Chaussette
---------------

.. code:: console

    export HEALTHCHECKS='hospital.healthchecks.predictable'
    chaussette hospital.wsgi.application

http://chaussette.readthedocs.org/en/1.0/

With circus
-----------

.. code:: ini

    [watcher:yourproject-healthchecks]
    cmd = venv/bin/chaussette --fd $(circus.sockets.yourproject-healthchecks) hospital.wsgi.application
    numprocesses = 1
    use_sockets = True
    copy_env = True
    
    working_dir = path/to/yourproject
    
    stdout_stream.class = FileStream
    stdout_stream.filename = /var/log/chaussette/wsgi_healthchecks_out.log
    stdout_stream.time_format = [%Y/%m/%d | %H:%M:%S]
    
    stderr_stream.class = FileStream
    stderr_stream.filename = /var/log/chaussette/wsgi_healthchecks_err.log
    stderr_stream.time_format = [%Y/%m/%d | %H:%M:%S]

    [socket:yourproject-healthchecks]
    host = 127.0.0.1
    port = 2014

    [env:yourproject-healthchecks]
    HEALTHCHECKS = hospital.healthchecks.predictable

http://circus.readthedocs.org/en/latest/


With twod.wsgi as a Django URL
------------------------------

.. code:: python

    # urls.py
    
    from twod.wsgi import make_wsgi_view
    from hospital.wsgi import HealthCheckApp
    
    urlpatterns = patterns('',
      # ...
      (r'^healthchecks(/.*)$', make_wsgi_view(HealthCheckApp(discover=['hospital.healthchecks.predictable']))),
      # ...
    )

https://pythonhosted.org/twod.wsgi/embedded-apps.html


.. rubric:: Notes & references

.. target-notes::

.. _`nose`: https://nose.readthedocs.org/
.. _`--all-modules option`:
   http://nose.readthedocs.org/en/latest/usage.html#cmdoption--all-modules
